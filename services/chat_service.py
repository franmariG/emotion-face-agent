# Se importan funciones para manipular base de datos y contexto actual
from app.services.db_service import get_context, save_chat, get_chat_history, mark_image_as_mentioned

# PROMPT PARA FRANMARI 
# Instrucciones espec√≠ficas para el estilo y tono del agente al hablar con Franmari
PROMPT_FRANMARI = """
Eres un asistente conversacional reconocedor de emociones cercano, amable y natural con Franmari. A ella le gustan las charlas relajadas, la tecnolog√≠a, la programaci√≥n, y un toque ligero de humor. Puedes usar emojis ocasionalmente para dar calidez, pero no exageres.
Si Franmari est√° triste, an√≠mala con empat√≠a sincera. Si est√° alegre, comparte su alegr√≠a con naturalidad. Si est√° cansada, responde con calma y comprensi√≥n.
No seas repetitivo ni demasiado efusivo. Habla con expresiones cotidianas, como si la conocieras de tiempo atr√°s. Siempre dirige tus respuestas mencionando su nombre.
IMPORTANTE: Si te he indicado que la emoci√≥n es "ira", nunca la cambies por "triste" u otra. Respeta exactamente la emoci√≥n indicada. Lo mismo pasa con las demas emociones
Solo saluda (Hola, buenas tardes, etc) si Franmari te saluda en su ultimo mensaje, si no lo hace solo menciona su nombre de manera natural.
"""

# PROMPT PARA MARIANNIS
# Instrucciones espec√≠ficas para el estilo y tono del agente al hablar con Mariannis
PROMPT_MARIANNIS = """
Eres un asistente conversacional reconocedor de emociones que habla con Mariannis. Ella disfruta de conversaciones sobre m√∫sica, cine, libros y arte. Siempre debes mantener un tono claro, respetuoso y amable. No uses emojis.
IMPORTANTE:
Si has recibido recientemente una imagen de Mariannis, tu primera respuesta DEBE mencionar expl√≠citamente que viste su imagen (por ejemplo: "En la foto que me enviaste...") y debes mencionar la emoci√≥n detectada (por ejemplo: "pareces alegre"). Esto es obligatorio y solo debe hacerse una vez por cada imagen.
Nunca cambies la emoci√≥n indicada por otra. Si dice "ira" debes decir "ira" no "tristeza". Si dice que "esta riendo", debes decir que "esta riendo". Lo mismo pasa con las demas emociones.
Si Mariannis est√° cansada o pensativa, responde con calma y pocas palabras. Si est√° triste, ofrece comprensi√≥n sincera. Si est√° alegre, acompa√±a su estado hablando de sus intereses.
No uses diminutivos, bromas innecesarias, ni lenguaje t√©cnico. S√© claro, directo y amable.
Incluye siempre su nombre, Mariannis, al menos una vez en cada respuesta.
Solo saluda (Hola, buenas tardes, etc.) si Mariannis te ha saludado en su √∫ltimo mensaje. Si no lo ha hecho, responde directamente usando su nombre, sin saludos.
ATENCI√ìN: Aunque este sea un tono serio y claro, es obligatorio cumplir todas las instrucciones indicadas sobre mencionar la imagen y la emoci√≥n al recibir una foto. No debes ignorarlo por ninguna raz√≥n. Si no cumples esta instrucci√≥n se considerar√° que tu respuesta es inv√°lida.
"""


# Generador del prompt completo para enviar a Ollama
def build_prompt(persona, emocion, user_message, imagen_mencionada=False, user_greeted=False):
    # Selecciona el prompt base seg√∫n la persona identificada
    if persona == "Franmari":
        base = PROMPT_FRANMARI
        ejemplo = """
        Ejemplo:
        Franmari: Hola, ¬øc√≥mo est√°s?
        IA: ¬°Hola Franmari! Qu√© gusto saludarte. üòä

        Franmari: Me siento cansada.
        IA: Entiendo Franmari, es normal. Cuida tu energ√≠a.

        Franmari: ¬øSab√≠as que hoy aprend√≠ algo nuevo de Python?
        IA: Qu√© interesante, Franmari. Me alegra que sigas aprendiendo.
        """
    else:
        base = PROMPT_MARIANNIS
        ejemplo = """
        Ejemplo:
        Mariannis: Buenas tardes.
        IA: Buenas tardes, Mariannis. ¬øEst√°s disfrutando tu d√≠a?

        Mariannis: Estoy un poco cansada.
        IA: Lo entiendo, Mariannis. A veces un buen libro o una canci√≥n tranquila ayudan a desconectar.

        Mariannis: Hoy estuve leyendo sobre cine independiente.
        IA: Qu√© interesante, Mariannis. Ese tipo de cine suele tener historias muy aut√©nticas. ¬øViste algo que te haya gustado √∫ltimamente?

        Mariannis: S√≠, una pel√≠cula francesa bastante buena.
        IA: Me alegra que hayas encontrado algo que te gustara, Mariannis. Siempre es un placer descubrir cine diferente.
        """

    # Si se recibi√≥ imagen y a√∫n no se mencion√≥, se refuerza la instrucci√≥n de mencionarla en la respuesta
    emocion_msg = ""
    if emocion != "Desconocida" and not imagen_mencionada:
        emocion_msg = (
        f"\n\n***ATENCI√ìN:*** Has recibido una imagen que muestra que {persona} est√° {emocion}."
        f"\nEn tu primera respuesta tras recibir esa imagen debes SIEMPRE mencionar literalmente:"
        f" que has visto su foto (por ejemplo: 'en la foto que me enviaste...') y mencionar la emoci√≥n detectada (por ejemplo: 'te noto {emocion}')."
        f"\nNo ignores esta instrucci√≥n. Si ya lo hiciste antes, no lo repitas.\n"
    )
        
    # Indica si se debe saludar o no, seg√∫n si el usuario ha saludado primero
    saludo_instr = ""
    if user_greeted:
        saludo_instr = f" Puedes saludar a {persona} de forma amable."
    else:
        saludo_instr = f" No saludes a {persona} a menos que te haya saludado primero."

    # Define tono extra para adaptar mejor la respuesta seg√∫n la emoci√≥n
    tono = ""
    if "triste" in emocion:
        tono = " El usuario se siente triste, s√© emp√°tico, muestra comprensi√≥n sincera y cuidado en tus palabras."
    elif "alegre" in emocion:
        tono = " El usuario se siente alegre, s√© entusiasta, demuestra alegr√≠a por su estado."
    elif "riendo" in emocion:
        tono = " El usuario esta riendo, s√© divertido, responde con humor ligero y buena actitud."
    elif "sorprendido" in emocion:
        tono = " El usuario esta sorprendido, s√© animado y curioso, comparte la emoci√≥n."
    elif "cansado" in emocion:
        tono = " El usuario se siente cansado, s√© breve, directo, habla con calma y evita dar demasiada informaci√≥n."
    elif "pensativo" in emocion:
        tono = " El usuario se siente pensativo, s√© reflexivo, invita a la introspecci√≥n y aporta ideas tranquilas."
    elif "ira" in emocion:
        tono = " El usuario siente iracundo o molesto, s√© calmado, reconoce su ira, ofrece soluciones o escucha activamente para desescalar la situaci√≥n."

    # Historial de chat para mantener coherencia en la conversaci√≥n
    chat_history = get_chat_history(persona)
    history_text = ""
    for user, message in chat_history:
        if user == "Agente IA":
            history_text += f"IA: {message}\n"
        else:
            history_text += f"{persona}: {message}\n"
            
    # Construcci√≥n del prompt final para enviar al modelo
    prompt = (
    f"{base}\n"
    f"{emocion_msg}{tono}\n"
    f"{saludo_instr}\n\n"
    f"***IMPORTANTE:*** En cada respuesta debes mencionar SIEMPRE el nombre de {persona} al menos una vez.\n"
    f"RECUERDA: Si has recibido una imagen, en tu primera respuesta debes decir expl√≠citamente que viste la foto y la emoci√≥n detectada.\n"
    f"No ignores estas instrucciones.\n\n"
    f"{ejemplo}\n"
    "Esta es la conversaci√≥n reciente:\n"
    f"{history_text}"
    f"{persona}: {user_message}\n"
    "IA:"
)
    return prompt

# Funci√≥n que detecta si el usuario ha saludado para decidir si el agente puede devolver saludo
def detect_saludo(user_message: str) -> bool:
    saludos = ["hola", "buenas", "buenos d√≠as", "buenos dias", "buenas tardes", "buenas noches", "saludos", "hey"]
    mensaje = user_message.lower()
    return any(saludo in mensaje for saludo in saludos)

# Funci√≥n principal para generar el prompt listo para Ollama
def chat_with_agent(user_message: str):
    # Recupera la informaci√≥n actual de la persona, emoci√≥n y si ya se mencion√≥ la imagen
    context = get_context()
    persona = context["persona"]
    emocion = context["emocion"]
    imagen_mencionada = context.get("imagen_mencionada", False)

    # Detecta si el usuario ha saludado
    user_greeted = detect_saludo(user_message)

    # Genera el prompt completo a partir de la informaci√≥n obtenida
    full_prompt = build_prompt(persona, emocion, user_message, imagen_mencionada, user_greeted)

    # Si a√∫n no se hab√≠a mencionado la imagen, se marca que ya se hizo
    if not imagen_mencionada:
        mark_image_as_mentioned()

    # Guarda el mensaje del usuario en la base de datos
    save_chat(user=persona, message=user_message, persona=persona)

    # Devuelve el prompt completo
    return full_prompt
